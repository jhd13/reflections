What happens when you initialize a repository? Why do you need to do it?
Git starts tracking the files in the repo.
Before you start tracking the content of the files, git doesn't know you care about tracking those files.
When you do start tracking the files via git init, git creates and starts maintaining a folder with metadata about the files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area consists of a list of references to a subset of the files in the working directory.
These files, to the best of my understanding, aren't yet part of the repo so they're new in the working directory.
This allows one or more files to be in the working directory without being added.
You specify the subset you want to add to the repo by adding them to the staging area.
When the staging area has the set of files you want to commit, you can then commit exactly those files.
Allows you not to just check in all files in a folder, but chose the correct ones.
Also allows you to check them in as part of logical subsets.

How can you use the staging area to make sure you have one commit per logical change?
You can change a number of files but not add them all to the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to make a major change.
When you want to make an experimental change.
When you want to make a change that is different from someone else's pending changes.
Branches help in these situations by allowing you to make and commit changes without affecting the master branch.

How do the diagrams help you visualize the branch structure?
They omit details and let you see all branches in a graphical way.
You can easily see which parent is in common among all branches included, which parents are reachable which tips.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches results in one branch that contains the changes made in both branches.
We represent it in the diagram in a way that displays graphically the history behind each change, both what is the "common ancestry"
between two commits and which changes are independent between them.
