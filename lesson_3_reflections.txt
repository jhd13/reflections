When would you want to use a remote repository rather than keeping all your work local?

    I would use a remote repository to:
    
    1. Collaborate with others.
    2. Work on multiple computers.
    3. Protect myself from data loss if my computer dies.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

    On a team I don't know who is going to change what.
    Remote changes might conflict with my changes.
    Manual pull allows me to choose when I'm ready to accept someone else's changes locally,
    including doing that at a time that is a good stopping point for my other work.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    A fork is a copy of a repo from one GitHub user's account on another user's account.
    It's like a clone but it includes a trace back to the original user's repo.
    You'd want to use a fork to separately publish changes to a repo while still giving props to the original code owner.
    You'll still likely need a local clone where you'll make changes.
    And branches may come in handy for the purposes described earlier in lesson 2 reflections.
    It's not that you would want to use one "instead of" another.
    Instead, it's about where in your process you will use which of these similar concepts.

What is the benefit of having a copy of the last known state of the remote stored locally?

    This can be really useful. 
    Using git fetch I can get a copy of all the latest changes on GitHub without yet trying to merge them.
    Then before trying to merge I can take a look at the changes and if needed discuss with the person who made the changes.
    I can see those offline, determine what conflicts there are, and work those out.
    Then when I'm ready I can merge the changes and fix the conflicts.
    
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    For team work we'd need different source control software. But assuming no source control software...
    To work on source code without Git or Github I'd probably use Dropbox of another shared file system.
    My collaborators and I would be able to very easily save changes when needed in the master copy of the files.
    That would be about the only good part about it.
    We would soon run into issues where more than one of us might try to change the same file and might overwrite each other's changes.
    We'd probably resort to working on our own copy of the source files and letting each other know what piece we are working on.
    We'd need to make sure not to work in the same files.
    It would be close to impossible to get work done without major issues coming up due to conflicting changes.
    